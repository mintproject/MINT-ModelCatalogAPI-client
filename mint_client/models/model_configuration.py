# coding: utf-8

"""
    Model Catalog

    This is MINT Model Catalog You can find out more about     Model Catalog at [https://w3id.org/mint/modelCatalog/](https://w3id.org/mint/modelCatalog/)  # noqa: E501

    OpenAPI spec version: 0.0.2
    Contact: mosorio@isi.edu
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ModelConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'type': 'list[str]',
        'label': 'str',
        'has_input': 'list[DatasetSpecification]',
        'has_output': 'list[DatasetSpecification]',
        'description': 'str',
        'has_cag': 'list[CAG]',
        'has_process': 'list[Process]',
        'has_time_interval': 'list[TimeInterval]',
        'has_implementation_script_location': 'str',
        'has_container': 'list[object]',
        'has_constraint': 'str',
        'has_parameter': 'list[Parameter]',
        'has_component_location': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'label': 'label',
        'has_input': 'hasInput',
        'has_output': 'hasOutput',
        'description': 'description',
        'has_cag': 'hasCAG',
        'has_process': 'hasProcess',
        'has_time_interval': 'hasTimeInterval',
        'has_implementation_script_location': 'hasImplementationScriptLocation',
        'has_container': 'hasContainer',
        'has_constraint': 'hasConstraint',
        'has_parameter': 'hasParameter',
        'has_component_location': 'hasComponentLocation'
    }

    def __init__(self, id=None, type=None, label=None, has_input=None, has_output=None, description=None, has_cag=None, has_process=None, has_time_interval=None, has_implementation_script_location=None, has_container=None, has_constraint=None, has_parameter=None, has_component_location=None):  # noqa: E501
        """ModelConfiguration - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._type = None
        self._label = None
        self._has_input = None
        self._has_output = None
        self._description = None
        self._has_cag = None
        self._has_process = None
        self._has_time_interval = None
        self._has_implementation_script_location = None
        self._has_container = None
        self._has_constraint = None
        self._has_parameter = None
        self._has_component_location = None
        self.discriminator = None

        self.id = id
        if type is not None:
            self.type = type
        if label is not None:
            self.label = label
        if has_input is not None:
            self.has_input = has_input
        if has_output is not None:
            self.has_output = has_output
        if description is not None:
            self.description = description
        if has_cag is not None:
            self.has_cag = has_cag
        if has_process is not None:
            self.has_process = has_process
        if has_time_interval is not None:
            self.has_time_interval = has_time_interval
        if has_implementation_script_location is not None:
            self.has_implementation_script_location = has_implementation_script_location
        if has_container is not None:
            self.has_container = has_container
        if has_constraint is not None:
            self.has_constraint = has_constraint
        if has_parameter is not None:
            self.has_parameter = has_parameter
        if has_component_location is not None:
            self.has_component_location = has_component_location

    @property
    def id(self):
        """Gets the id of this ModelConfiguration.  # noqa: E501


        :return: The id of this ModelConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelConfiguration.


        :param id: The id of this ModelConfiguration.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this ModelConfiguration.  # noqa: E501


        :return: The type of this ModelConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelConfiguration.


        :param type: The type of this ModelConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def label(self):
        """Gets the label of this ModelConfiguration.  # noqa: E501


        :return: The label of this ModelConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ModelConfiguration.


        :param label: The label of this ModelConfiguration.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def has_input(self):
        """Gets the has_input of this ModelConfiguration.  # noqa: E501


        :return: The has_input of this ModelConfiguration.  # noqa: E501
        :rtype: list[DatasetSpecification]
        """
        return self._has_input

    @has_input.setter
    def has_input(self, has_input):
        """Sets the has_input of this ModelConfiguration.


        :param has_input: The has_input of this ModelConfiguration.  # noqa: E501
        :type: list[DatasetSpecification]
        """

        self._has_input = has_input

    @property
    def has_output(self):
        """Gets the has_output of this ModelConfiguration.  # noqa: E501


        :return: The has_output of this ModelConfiguration.  # noqa: E501
        :rtype: list[DatasetSpecification]
        """
        return self._has_output

    @has_output.setter
    def has_output(self, has_output):
        """Sets the has_output of this ModelConfiguration.


        :param has_output: The has_output of this ModelConfiguration.  # noqa: E501
        :type: list[DatasetSpecification]
        """

        self._has_output = has_output

    @property
    def description(self):
        """Gets the description of this ModelConfiguration.  # noqa: E501


        :return: The description of this ModelConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelConfiguration.


        :param description: The description of this ModelConfiguration.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def has_cag(self):
        """Gets the has_cag of this ModelConfiguration.  # noqa: E501


        :return: The has_cag of this ModelConfiguration.  # noqa: E501
        :rtype: list[CAG]
        """
        return self._has_cag

    @has_cag.setter
    def has_cag(self, has_cag):
        """Sets the has_cag of this ModelConfiguration.


        :param has_cag: The has_cag of this ModelConfiguration.  # noqa: E501
        :type: list[CAG]
        """

        self._has_cag = has_cag

    @property
    def has_process(self):
        """Gets the has_process of this ModelConfiguration.  # noqa: E501


        :return: The has_process of this ModelConfiguration.  # noqa: E501
        :rtype: list[Process]
        """
        return self._has_process

    @has_process.setter
    def has_process(self, has_process):
        """Sets the has_process of this ModelConfiguration.


        :param has_process: The has_process of this ModelConfiguration.  # noqa: E501
        :type: list[Process]
        """

        self._has_process = has_process

    @property
    def has_time_interval(self):
        """Gets the has_time_interval of this ModelConfiguration.  # noqa: E501


        :return: The has_time_interval of this ModelConfiguration.  # noqa: E501
        :rtype: list[TimeInterval]
        """
        return self._has_time_interval

    @has_time_interval.setter
    def has_time_interval(self, has_time_interval):
        """Sets the has_time_interval of this ModelConfiguration.


        :param has_time_interval: The has_time_interval of this ModelConfiguration.  # noqa: E501
        :type: list[TimeInterval]
        """

        self._has_time_interval = has_time_interval

    @property
    def has_implementation_script_location(self):
        """Gets the has_implementation_script_location of this ModelConfiguration.  # noqa: E501


        :return: The has_implementation_script_location of this ModelConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._has_implementation_script_location

    @has_implementation_script_location.setter
    def has_implementation_script_location(self, has_implementation_script_location):
        """Sets the has_implementation_script_location of this ModelConfiguration.


        :param has_implementation_script_location: The has_implementation_script_location of this ModelConfiguration.  # noqa: E501
        :type: str
        """

        self._has_implementation_script_location = has_implementation_script_location

    @property
    def has_container(self):
        """Gets the has_container of this ModelConfiguration.  # noqa: E501


        :return: The has_container of this ModelConfiguration.  # noqa: E501
        :rtype: list[object]
        """
        return self._has_container

    @has_container.setter
    def has_container(self, has_container):
        """Sets the has_container of this ModelConfiguration.


        :param has_container: The has_container of this ModelConfiguration.  # noqa: E501
        :type: list[object]
        """

        self._has_container = has_container

    @property
    def has_constraint(self):
        """Gets the has_constraint of this ModelConfiguration.  # noqa: E501


        :return: The has_constraint of this ModelConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._has_constraint

    @has_constraint.setter
    def has_constraint(self, has_constraint):
        """Sets the has_constraint of this ModelConfiguration.


        :param has_constraint: The has_constraint of this ModelConfiguration.  # noqa: E501
        :type: str
        """

        self._has_constraint = has_constraint

    @property
    def has_parameter(self):
        """Gets the has_parameter of this ModelConfiguration.  # noqa: E501


        :return: The has_parameter of this ModelConfiguration.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._has_parameter

    @has_parameter.setter
    def has_parameter(self, has_parameter):
        """Sets the has_parameter of this ModelConfiguration.


        :param has_parameter: The has_parameter of this ModelConfiguration.  # noqa: E501
        :type: list[Parameter]
        """

        self._has_parameter = has_parameter

    @property
    def has_component_location(self):
        """Gets the has_component_location of this ModelConfiguration.  # noqa: E501


        :return: The has_component_location of this ModelConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._has_component_location

    @has_component_location.setter
    def has_component_location(self, has_component_location):
        """Sets the has_component_location of this ModelConfiguration.


        :param has_component_location: The has_component_location of this ModelConfiguration.  # noqa: E501
        :type: str
        """

        self._has_component_location = has_component_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

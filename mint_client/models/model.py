# coding: utf-8

"""
    Model Catalog

    This is MINT Model Catalog You can find out more about     Model Catalog at [https://w3id.org/mint/modelCatalog/](https://w3id.org/mint/modelCatalog/)  # noqa: E501

    OpenAPI spec version: 0.0.2
    Contact: mosorio@isi.edu
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Model(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'label': 'str',
        'type': 'list[str]',
        'has_software_version': 'list[object]',
        'has_model_category': 'list[str]',
        'has_documentation': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'type': 'type',
        'has_software_version': 'hasSoftwareVersion',
        'has_model_category': 'hasModelCategory',
        'has_documentation': 'hasDocumentation'
    }

    def __init__(self, id=None, label=None, type=None, has_software_version=None, has_model_category=None, has_documentation=None):  # noqa: E501
        """Model - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._label = None
        self._type = None
        self._has_software_version = None
        self._has_model_category = None
        self._has_documentation = None
        self.discriminator = None

        self.id = id
        if label is not None:
            self.label = label
        else:
            if hasattr(self, '_label'): del self._label
            if hasattr(self.attribute_map, 'label'): del self.attribute_map['label']
            if hasattr(self.openapi_types, 'label'): del self.openapi_types['label']
        if type is not None:
            self.type = type
        else:
            if hasattr(self, '_type'): del self._type
            if hasattr(self.attribute_map, 'type'): del self.attribute_map['type']
            if hasattr(self.openapi_types, 'type'): del self.openapi_types['type']
        if has_software_version is not None:
            self.has_software_version = has_software_version
        else:
            if hasattr(self, '_has_software_version'): del self._has_software_version
            if hasattr(self.attribute_map, 'has_software_version'): del self.attribute_map['has_software_version']
            if hasattr(self.openapi_types, 'has_software_version'): del self.openapi_types['has_software_version']
        if has_model_category is not None:
            self.has_model_category = has_model_category
        else:
            if hasattr(self, '_has_model_category'): del self._has_model_category
            if hasattr(self.attribute_map, 'has_model_category'): del self.attribute_map['has_model_category']
            if hasattr(self.openapi_types, 'has_model_category'): del self.openapi_types['has_model_category']
        if has_documentation is not None:
            self.has_documentation = has_documentation
        else:
            if hasattr(self, '_has_documentation'): del self._has_documentation
            if hasattr(self.attribute_map, 'has_documentation'): del self.attribute_map['has_documentation']
            if hasattr(self.openapi_types, 'has_documentation'): del self.openapi_types['has_documentation']

    @property
    def id(self):
        """Gets the id of this Model.  # noqa: E501


        :return: The id of this Model.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Model.


        :param id: The id of this Model.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def label(self):
        """Gets the label of this Model.  # noqa: E501


        :return: The label of this Model.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Model.


        :param label: The label of this Model.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this Model.  # noqa: E501


        :return: The type of this Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Model.


        :param type: The type of this Model.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def has_software_version(self):
        """Gets the has_software_version of this Model.  # noqa: E501


        :return: The has_software_version of this Model.  # noqa: E501
        :rtype: list[object]
        """
        return self._has_software_version

    @has_software_version.setter
    def has_software_version(self, has_software_version):
        """Sets the has_software_version of this Model.


        :param has_software_version: The has_software_version of this Model.  # noqa: E501
        :type: list[object]
        """

        self._has_software_version = has_software_version

    @property
    def has_model_category(self):
        """Gets the has_model_category of this Model.  # noqa: E501


        :return: The has_model_category of this Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._has_model_category

    @has_model_category.setter
    def has_model_category(self, has_model_category):
        """Sets the has_model_category of this Model.


        :param has_model_category: The has_model_category of this Model.  # noqa: E501
        :type: list[str]
        """

        self._has_model_category = has_model_category

    @property
    def has_documentation(self):
        """Gets the has_documentation of this Model.  # noqa: E501


        :return: The has_documentation of this Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._has_documentation

    @has_documentation.setter
    def has_documentation(self, has_documentation):
        """Sets the has_documentation of this Model.


        :param has_documentation: The has_documentation of this Model.  # noqa: E501
        :type: list[str]
        """

        self._has_documentation = has_documentation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Model):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
